/// <reference types="node" />
/// <reference types="node" />
import FormData from "form-data";
import type { RequestConfigBuilder, HttpMethod, Params, ProxyConfig } from "./http/HttpClientInterface";
import type { BasicAuth, DiscriminatedAuth } from "./types/auth";
import type { Agent as HttpsAgent } from "https";
declare type Data = Params | FormData;
export declare class KintoneRequestConfigBuilder implements RequestConfigBuilder {
    private readonly baseUrl;
    private readonly headers;
    private readonly auth;
    private readonly httpsAgent?;
    private readonly clientCertAuth?;
    private readonly proxy?;
    private requestToken;
    constructor(options: {
        baseUrl: string;
        auth: DiscriminatedAuth;
        basicAuth?: BasicAuth;
        proxy?: ProxyConfig;
        httpsAgent?: HttpsAgent;
        clientCertAuth?: {
            pfx: Buffer;
            password: string;
        } | {
            pfxFilePath: string;
            password: string;
        };
        userAgent?: string;
    });
    build(method: HttpMethod, path: string, params: Data, options?: {
        responseType: "arraybuffer";
    }): Promise<{
        url: string;
        method: HttpMethod;
        headers: any;
        httpsAgent?: any;
        data?: any;
        proxy?: ProxyConfig | undefined;
    }>;
    private buildRequestUrl;
    private buildData;
    private buildHeaders;
    private getRequestToken;
}
export {};
